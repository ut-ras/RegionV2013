/*********************************************************************
*
*   Game-logic algorithms
*   26-02-2013
*
*********************************************************************/

I.] Initializations  // 1-minute prior to start
    --> Init_PTAM
    --> SD/USB read
    --> Generate(?) Map (hardcoded), set current location to (0,0) 
        - JSM file
    --> A*_init, calculate shortest paths. Junctions of logs avoidance   

II.] Receive XYZ coordinates from PTAM
    --> [x,y,z] = call()
    --> location[6][x,y] = A*   // Return array of 6 quadrants of where to go
                                // And (x,y) coordinates of quadrants, 2D-Array
    
    for(i=0; i < 6; i++) {
        current[4]=PTAM;
        if(current[1,2] = location[x,y]) {
            pickup();
        } else {
            drive();
        }
    } 

--> Pseudo-code for A*
 function A*(start,goal)
     closedset := the empty set    // The set of nodes already evaluated.
     openset := {start}    // The set of tentative nodes to be evaluated, initially containing the start node
     came_from := the empty map    // The map of navigated nodes.
 
     g_score[start] := 0    // Cost from start along best known path.
     // Estimated total cost from start to goal through y.
     f_score[start] := g_score[start] + heuristic_cost_estimate(start, goal)
 
     while openset is not empty
         current := the node in openset having the lowest f_score[] value
         if current = goal
             return reconstruct_path(came_from, goal)
 
         remove current from openset
         add current to closedset
         for each neighbor in neighbor_nodes(current)
             tentative_g_score := g_score[current] + dist_between(current,neighbor)
             if neighbor in closedset
                 if tentative_g_score >= g_score[neighbor]
                     continue
 
             if neighbor not in openset or tentative_g_score < g_score[neighbor] 
                 came_from[neighbor] := current
                 g_score[neighbor] := tentative_g_score
                 f_score[neighbor] := g_score[neighbor] + heuristic_cost_estimate(neighbor, goal)
                 if neighbor not in openset
                     add neighbor to openset
 
     return failure
 
 function reconstruct_path(came_from, current_node)
     if came_from[current_node] in set
         p := reconstruct_path(came_from, came_from[current_node])
         return (p + current_node)
     else
         return current_node     
